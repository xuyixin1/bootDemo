package com.jeeplus.modules.admin.controller;

import com.jeeplus.common.persistence.Page;
import com.jeeplus.common.utils.DateUtils;
import com.jeeplus.common.web.BaseController;
import com.jeeplus.modules.admin.common.ServerResponse;
import com.jeeplus.modules.admin.entity.SysAdminUser;
import com.jeeplus.modules.admin.service.AccountManagementService;
import com.jeeplus.modules.admin.service.SysAdminUserService;
import com.jeeplus.modules.sys.interceptor.AdminAuthonInterceptor;
import com.jeeplus.modules.sys.utils.MySqlUtils;
import java.io.PrintStream;
import java.util.Date;
import java.util.Map;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.servlet.http.HttpSession;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

@Controller
@RequestMapping({"/admin/user"})
public class AccountManagementController
  extends BaseController
{
  @Autowired
  private AccountManagementService accountManagementService;
  @Autowired
  private SysAdminUserService sysAdminUserService;

  @RequestMapping({"/jumpLeftMenu"})
  public String jumpLeftMenu(HttpServletRequest request, HttpServletResponse response, Model model)
  {
    HttpSession session = request.getSession();

    SysAdminUser sysAdminUser = (SysAdminUser)session.getAttribute("currentUser");
    model.addAttribute("sysAdminUser", sysAdminUser);
    return "modules/admin/accountManage";
  }

  @RequestMapping({"/jump"})
  public String jump(HttpServletRequest request, HttpServletResponse response, Model model)
  {
    return "modules/admin/ProbationerAccountManagementList";
  }

  @RequestMapping({"/jumpPartner"})
  public String jumpPartner(HttpServletRequest request, HttpServletResponse response, Model model)
  {
    return "modules/admin/PartnerAccountManagementList";
  }

  @RequestMapping({"/jumpAccount"})
  public String jumpAccount(HttpServletRequest request, HttpServletResponse response, Model model)
  {
    return "modules/admin/AccountManagementList";
  }

  @RequestMapping({"findAllTrialAccount"})
  @ResponseBody
  public ServerResponse findAllTrialAccount(HttpServletRequest request, HttpServletResponse response)
  {
    String SearchCondition = request.getParameter("SearchCondition").trim();
    String start = request.getParameter("SearchStartTime");
    String SearchStartTime = null;
    String end = request.getParameter("SearchEndTime");
    String SearchEndTime = null;
    if ((start == null) || ("".equals(start))) {
      SearchStartTime = "1970-01-01 00:00:00";
    } else {
      SearchStartTime = start + " 00:00:00";
    }
    if ((end == null) || ("".equals(end)))
    {
      Date date = new Date();
      SearchEndTime = DateUtils.formatDate(date, new Object[] { "yyyy-MM-dd" });
      SearchEndTime = SearchEndTime + " 23:59:59";
    }
    else
    {
      SearchEndTime = end + " 23:59:59";
    }
    SysAdminUser sysUser = new SysAdminUser();
    sysUser.setSearchStartTime(SearchStartTime);
    sysUser.setSearchEndTime(SearchEndTime);
    if ((SearchCondition != null) && (!"".equals(SearchCondition)))
    {
      sysUser.setUserName(MySqlUtils.specialStr(SearchCondition));
      sysUser.setPhone(MySqlUtils.specialStr(SearchCondition));
    }
    Page<SysAdminUser> page = this.accountManagementService.findPage(new Page(request, response), sysUser);
    System.out.println(page);
    return ServerResponse.createBySuccess(page);
  }

  @RequestMapping({"findAllCooperativePartner"})
  @ResponseBody
  public ServerResponse findAllCooperativePartner(HttpServletRequest request, HttpServletResponse response)
  {
    String SearchCondition = request.getParameter("SearchCondition").trim();
    String start = request.getParameter("SearchStartTime");
    String SearchStartTime = null;
    String end = request.getParameter("SearchEndTime");
    String SearchEndTime = null;
    if ((start == null) || ("".equals(start))) {
      SearchStartTime = "1970-01-01 00:00:00";
    } else {
      SearchStartTime = start + " 00:00:00";
    }
    if ((end == null) || ("".equals(end)))
    {
      Date date = new Date();
      SearchEndTime = DateUtils.formatDate(date, new Object[] { "yyyy-MM-dd" });
      SearchEndTime = SearchEndTime + " 23:59:59";
    }
    else
    {
      SearchEndTime = end + " 23:59:59";
    }
    SysAdminUser sysUser = new SysAdminUser();
    sysUser.setSearchStartTime(SearchStartTime);
    sysUser.setSearchEndTime(SearchEndTime);
    if ((SearchCondition != null) && (!"".equals(SearchCondition)))
    {
      sysUser.setUserName(MySqlUtils.specialStr(SearchCondition));
      sysUser.setPhone(MySqlUtils.specialStr(SearchCondition));
      sysUser.setCompanyName(MySqlUtils.specialStr(SearchCondition));
    }
    Page<SysAdminUser> page = this.accountManagementService
      .findAllCooperativePartner(new Page(request, response), sysUser);
    return ServerResponse.createBySuccess(page);
  }

  @RequestMapping({"findAllAccount"})
  @ResponseBody
  public ServerResponse findAllAccount(HttpServletRequest request, HttpServletResponse response)
  {
    String SearchCondition = request.getParameter("SearchCondition").trim();
    String state = request.getParameter("state");
    SysAdminUser sysUser = new SysAdminUser();
    if ((state != null) && (!"".equals(state)))
    {
      if (state.equals("0")) {
        sysUser.setState(Integer.valueOf(0));
      }
      if (state.equals("5")) {
        sysUser.setState(Integer.valueOf(5));
      }
      if (state.equals("6")) {
        sysUser.setState(Integer.valueOf(6));
      }
    }
    if ((SearchCondition != null) && (!"".equals(SearchCondition)))
    {
      sysUser.setUserName(MySqlUtils.specialStr(SearchCondition));
      sysUser.setPhone(MySqlUtils.specialStr(SearchCondition));
    }
    Page<SysAdminUser> page = this.accountManagementService.findAllAccount(new Page(request, response),
      sysUser);
    return ServerResponse.createBySuccess(page);
  }

  @RequestMapping({"/jumpToTrialAccount"})
  public String TrialAccountDetail(Model model, Integer userId)
  {
    SysAdminUser sysUser = new SysAdminUser();
    sysUser = this.sysAdminUserService.findInfoByUserId(userId.intValue());
    String intentionTitle = "";
    if ((sysUser.getIntention() != null) && (!sysUser.getIntention().equals("")))
    {
      String intention = sysUser.getIntention();
      if (intention.length() > 1)
      {
        String[] str = intention.split(",");
        for (int i = 0; i < str.length; i++)
        {
          int type = Integer.parseInt(str[i]);
          if (type == 1) {
            intentionTitle = intentionTitle + "炫店小程序";
          } else if (type == 2) {
            intentionTitle = intentionTitle + "、新版公众号";
          } else if (type == 3) {
            intentionTitle = intentionTitle + "、旧版公众号";
          } else if (type == 4) {
            intentionTitle = intentionTitle + "、炫销宝";
          }
        }
        if (intentionTitle.indexOf("炫店小程序") == -1) {
          intentionTitle = intentionTitle.substring(1);
        }
      }
      else if (Integer.parseInt(intention) == 1)
      {
        intentionTitle = intentionTitle + "炫店小程序";
      }
      else if (Integer.parseInt(intention) == 2)
      {
        intentionTitle = intentionTitle + "新版公众号";
      }
      else if (Integer.parseInt(intention) == 3)
      {
        intentionTitle = intentionTitle + "旧版公众号";
      }
      else if (Integer.parseInt(intention) == 4)
      {
        intentionTitle = intentionTitle + "炫销宝";
      }
    }
    model.addAttribute("intentionTitle", intentionTitle);
    model.addAttribute("sysUser", sysUser);
    return "modules/admin/ProbationerAccountManagementForm";
  }

  @RequestMapping({"/jumpToCooperativePartner"})
  public String CooperativePartnerDetail(Model model, Integer userId)
  {
    SysAdminUser sysUser = new SysAdminUser();
    sysUser = this.sysAdminUserService.findInfoByUserId(userId.intValue());
    model.addAttribute("sysUser", sysUser);
    return "modules/admin/PartnerAccountManagementForm";
  }

  @RequestMapping({"updateInfo"})
  @ResponseBody
  public ServerResponse updateInfoByUserId(Integer userId)
  {
    return this.sysAdminUserService.updateInfoByUserId(userId.intValue());
  }

  @RequestMapping({"todo"})
  @ResponseBody
  public String todo(HttpServletRequest request, HttpServletResponse response)
  {
    String res = "1";

    HttpSession session = request.getSession();
    String sessionId = session.getId();
    Integer sessionMapUserId = (Integer)AdminAuthonInterceptor.adminSessionMap.get(sessionId);
    if (sessionMapUserId == null) {
      return "-1";
    }
    Integer sessionUserId = (Integer)request.getSession().getAttribute("userId");

    String Id = request.getParameter("activeUserId");
    if ((Id != null) && (!"".equals(Id)))
    {
      Integer activeUserId = Integer.valueOf(Id);
      System.out.println("activeUserId:" + activeUserId);
      if (activeUserId.intValue() != sessionUserId.intValue()) {
        return "-1";
      }
    }
    return res;
  }
}
